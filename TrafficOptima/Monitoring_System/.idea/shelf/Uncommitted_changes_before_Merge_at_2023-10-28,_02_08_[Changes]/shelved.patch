Index: Server_Application/Flask_Server/Functions/Violation_Detection/SpeedRecord/speed_record.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server_Application/Flask_Server/Functions/Violation_Detection/SpeedRecord/speed_record.txt b/Server_Application/Flask_Server/Functions/Violation_Detection/SpeedRecord/speed_record.txt
new file mode 100644
--- /dev/null	(date 1698439078963)
+++ b/Server_Application/Flask_Server/Functions/Violation_Detection/SpeedRecord/speed_record.txt	(date 1698439078963)
@@ -0,0 +1,2 @@
+ID 	 SPEED
+------	-------
Index: Server_Application/Flask_Server/Functions/Accident_Severity_Detection/ASD_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from ultralytics import YOLO\nfrom email.message import EmailMessage\nfrom twilio.rest import Client\nimport smtplib\nimport cv2\nimport torch\nimport datetime\nimport configparser\n\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Utills.db import asd_collection, emg_srv_collection\n\n# Define paths to configuration files and AI model\nConfig_Path = '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/config.ini'\nASD_Model_Path = '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/AI_Models/Accident_Severity_Detection/ASD_model.pt'\n\n# READ THE CONFIGURATIONS FILE\nconfig = configparser.ConfigParser()\nconfig.read(Config_Path)\n\n# GET EMAIL CREDENTIALS\nuser = config['Email']['user']\npassword = config['Email']['password']\n\n# GET TWILIO CREDENTIALS\ntwilio_account_sid = config['Twilio']['account_sid']\ntwilio_auth_token = config['Twilio']['auth_token']\ntwilio_phone_number = config['Twilio']['phone_no']\n\n# GET THE EMERGENCY SERVICE CONTACT DETAILS\ndef get_emergency_service_info(service_type):\n    # Define a query to retrieve emergency service details based on service type\n    query = {\"serviceType\": service_type}\n\n    # Fetch the document from the collection\n    document = emg_srv_collection.find_one(query)\n\n    if document:\n        return {\n            \"mobileNumber\": document.get(\"mobileNumber\", \"\"),\n            \"email\": document.get(\"email\", \"\")\n        }\n    else:\n        return None\n\n# EMAIL SENDING FUNCTION\ndef email_alert(subject, body, to):\n    # Create an email message\n    msg = EmailMessage()\n    msg.set_content(body)\n    msg['subject'] = subject\n    msg['to'] = to\n    msg['from'] = user\n\n    # Connect to the SMTP server and send the email\n    server = smtplib.SMTP(\"smtp.gmail.com\",\n                          587)  # Create an SMTP server object for Gmail with the specified host and port\n    server.starttls()  # Start a secure TLS connection with the SMTP server to encrypt communication\n    server.login(user, password)\n    server.send_message(msg)  # Send the email message object `msg` using the SMTP server\n\n    server.quit()  # Close the SMTP server connection gracefully after sending the email\n\n\n# SMS SENDING FUNCTION\ndef send_twilio_message(to_number, message_body):\n\n    # Configure Twilio API with credentials\n    account_sid = twilio_account_sid\n    auth_token = twilio_auth_token\n\n    # Create a Twilio client and send an SMS\n    client = Client(account_sid, auth_token)\n\n    client.messages.create(\n        from_=twilio_phone_number,  # Twilio phone number\n        body=message_body,\n        to=to_number  # Recipient's phone number\n    )\n\n# VIDEO PREDICTIONS DONE BY THE YOLO V8 IMAGE CLASSIFICATION MODEL\ndef video_detection(path_x, accident_detected, location):\n    # Create a YOLO model for object detection using the specified ASD model\n    model = YOLO(ASD_Model_Path)\n    video_capture = path_x\n    cap = cv2.VideoCapture(video_capture)\n\n    class_names = [\"moderate-accident\", \"no-accident\", \"severe-accident\"]\n\n    # Loop to process video frames\n    while cap.isOpened():\n        # Read a frame from the video capture\n        success, frame = cap.read()\n\n        # Check if the frame was read successfully\n        if success:\n            # Perform image classification using YOLO\n            results = model(frame)\n\n            if not accident_detected:\n                asd_logs = []\n                send_email_alert = False  # Flag to trigger email_alert function\n\n                # Check if YOLO detected any classes\n                if results[0].probs is not None:\n                    # Get detection probabilities\n                    probs = results[0].probs.data\n                    # Sort probabilities\n                    sorted_indices = torch.argsort(probs, descending=True)\n\n                    # Iterate through sorted probabilities\n                    for idx in sorted_indices:\n                        # Get class name\n                        class_name = class_names[idx]\n                        # Get detection confidence\n                        confidence = probs[idx].item()\n\n                        if confidence > 0.90 and class_name != \"no-accident\":\n                            current_datetime = datetime.datetime.now()\n\n                            asd_logs.append({\n                                \"Camera\": \"Camera 01\",\n                                \"Location\": location,\n                                \"Accident_Severity\": class_name,\n                                \"Confidence\": confidence,\n                                \"Date_Time\": current_datetime,\n                            })\n\n                            if class_name == \"severe-accident\" and confidence > 0.90:\n                                send_email_alert = True  # Trigger email alert\n\n                            accident_detected = True\n\n                            break\n\n                if asd_logs:\n                    asd_collection.insert_many(asd_logs)\n\n                if send_email_alert:\n                    location = asd_logs[-1][\"Location\"]\n                    severity = asd_logs[-1][\"Accident_Severity\"]\n                    dt = asd_logs[-1][\"Date_Time\"]\n\n                    # Fetch the mobile number and email for \"Ambulance Service\"\n                    service_info = get_emergency_service_info(\"Ambulance Service\")\n\n                    if service_info:\n                        mobile_number = service_info[\"mobileNumber\"]\n                        email_address = service_info[\"email\"]\n\n                        email_body = f\"\uFE0F\uFE0F\\n\\n❗\uFE0FSevere Accident Happened❗\uFE0F:\\n\\n\\n \uD83D\uDEA8 We require immediate assistance for a severe accident in {location}, \\n\\n\\n \uD83D\uDED1 Location: {location}\\n\\n \uD83D\uDED1 Severity: {severity}\\n\\n \uD83D\uDED1 Date Time: {dt}\\n\\n\\n \uD83D\uDEA8 Kindly dispatch an ambulance urgently ‼\uFE0F.\\n\\n\\n\\n\"\n                        email_alert(\"\uD83D\uDEA8 Accident Alert !! \uD83D\uDEA8\", email_body, email_address)\n\n                        # to_number = mobile_number\n                        # message_body = f\"Severe Accident Happene❗\uFE0Fd:\\nLocation: {location}\\nSeverity: {severity}\\nDate Time: {dt}\"\n\n                        # Call the function\n                        # send_twilio_message(to_number, message_body)\n\n            annotated_frame = results[0].plot()  # Annotate the frame with detection results\n\n            yield annotated_frame  # Yield the annotated frame for video streaming\n\n        else:\n            break  # Break the loop when the video ends\n\n    cap.release()  # Release the video capture device\n    cv2.destroyAllWindows()  # Close any open CV2 windows\n\n\n# GENERATE THE FRAMES FROM THE PREDICTED VIDEO\ndef generate_frames(path_x='', location=''):\n    accident_detected = False  # Initialize the flag\n    yolo_output = video_detection(path_x, accident_detected, location)\n    for detection_ in yolo_output:\n        ref, buffer = cv2.imencode('.jpg', detection_)\n        frame = buffer.tobytes()\n        yield (b'--frame\\r\\n'\n               b'Content-Type: image/jpeg\\r\\n\\r\\n' + frame + b'\\r\\n')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server_Application/Flask_Server/Functions/Accident_Severity_Detection/ASD_functions.py b/Server_Application/Flask_Server/Functions/Accident_Severity_Detection/ASD_functions.py
--- a/Server_Application/Flask_Server/Functions/Accident_Severity_Detection/ASD_functions.py	(revision b20a5f872c074101a830ff490895a993d68dc98b)
+++ b/Server_Application/Flask_Server/Functions/Accident_Severity_Detection/ASD_functions.py	(date 1698439078963)
@@ -10,8 +10,8 @@
 from TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Utills.db import asd_collection, emg_srv_collection
 
 # Define paths to configuration files and AI model
-Config_Path = '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/config.ini'
-ASD_Model_Path = '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/AI_Models/Accident_Severity_Detection/ASD_model.pt'
+Config_Path = '/Users/chamathkavindya/RP_Project_Repo/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/config.ini'
+ASD_Model_Path = '/Users/chamathkavindya/RP_Project_Repo/2023-228/TrafficOptima/Monitoring_System/Server_Application/AI_Models/Accident_Severity_Detection/ASD_model.pt'
 
 # READ THE CONFIGURATIONS FILE
 config = configparser.ConfigParser()
Index: Server_Application/Flask_Server/server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import jwt\nfrom flask import Flask\nfrom flask_bcrypt import Bcrypt\nfrom flask_cors import CORS\nfrom flask import request, abort\n\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Accident_Severity_Detection.ASD_routes import \\\n    init_asd_routes\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Emergency_vehicle_prioritization.EVP_Routes import \\\n    evp_routes\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Organization.Organization_Routes import \\\n    init_organizationRoutes\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Permission_And_Settings.Settings import \\\n    init_setting\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Permission_And_Settings.User import \\\n    init_permission_setting\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Plans_Prices.Plans_Prices_Routes import \\\n    init_palns_prices_routes\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Traffic_Light_System.Traffic_Light_System_Routes import \\\n    init_trafic_light_system_routes\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Violation_Detection.violation_detection import \\\n    init_violation_detection\nfrom TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Utills.db import settings\n\napp = Flask(__name__)\nCORS(app)\nbcrypt = Bcrypt(app)\napp.config['UPLOAD_FOLDER'] = 'static/files'\napp.config['SECRET_KEY'] = 'mysecretkey'\n\ninit_trafic_light_system_routes(app, \"/traffic\")\ninit_asd_routes(app, \"/accident\")\nevp_routes(app, \"/emergency\")\ninit_violation_detection(app, \"/violation\")\n\ninit_organizationRoutes(app, bcrypt)\ninit_palns_prices_routes(app)\ninit_permission_setting(app, bcrypt)\ninit_setting(app)\n\n@app.before_request\ndef before_request():\n    if request.path.startswith('/violation') or request.path.startswith('/emergency') or request.path.startswith(\n            '/accident') or request.path.startswith('/traffic'):\n        token = request.headers.get('Authorization')\n        payload = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])\n        user_id = payload['user']['id']\n        result = settings.find_one({'user_id': user_id}, sort=[('created_at', -1)])\n        if request.path.startswith('/violation'):\n            if 'Traffic Violation' not in result['settings_list']:\n                abort(403)\n        if request.path.startswith('/emergency'):\n            if 'EV Prioritization' not in result['settings_list']:\n                abort(403)\n        if request.path.startswith('/accident'):\n            if 'Accident Detection' not in result['settings_list']:\n                abort(403)\n        if request.path.startswith('/traffic'):\n            if 'Traffic Optimization' not in result['settings_list']:\n                abort(403)\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server_Application/Flask_Server/server.py b/Server_Application/Flask_Server/server.py
--- a/Server_Application/Flask_Server/server.py	(revision b20a5f872c074101a830ff490895a993d68dc98b)
+++ b/Server_Application/Flask_Server/server.py	(date 1698439078964)
@@ -16,8 +16,8 @@
     init_permission_setting
 from TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Plans_Prices.Plans_Prices_Routes import \
     init_palns_prices_routes
-from TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Traffic_Light_System.Traffic_Light_System_Routes import \
-    init_trafic_light_system_routes
+# from TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Traffic_Light_System.Traffic_Light_System_Routes import \
+#     init_trafic_light_system_routes
 from TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Routes.Violation_Detection.violation_detection import \
     init_violation_detection
 from TrafficOptima.Monitoring_System.Server_Application.Flask_Server.Utills.db import settings
@@ -28,16 +28,18 @@
 app.config['UPLOAD_FOLDER'] = 'static/files'
 app.config['SECRET_KEY'] = 'mysecretkey'
 
-init_trafic_light_system_routes(app, "/traffic")
-init_asd_routes(app, "/accident")
+# init_trafic_light_system_routes(app, "/traffic")
+# init_asd_routes(app, "/accident")
 evp_routes(app, "/emergency")
-init_violation_detection(app, "/violation")
+# init_violation_detection(app, "/violation")
 
 init_organizationRoutes(app, bcrypt)
 init_palns_prices_routes(app)
 init_permission_setting(app, bcrypt)
 init_setting(app)
 
+print(bcrypt.generate_password_hash("admin").decode('utf-8'))
+
 @app.before_request
 def before_request():
     if request.path.startswith('/violation') or request.path.startswith('/emergency') or request.path.startswith(
Index: Frontend_Application/src/components/Accident_Severity_Detection/CameraMonitoring/ASDCamMonitoring.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport swal from \"sweetalert\";\nimport '../CameraMonitoring/ASDstylesCamMonitoring.css'\nimport OutputVideoComponent from './ASDOutputVideo';\n\nfunction ASDCamMonitoring() {\n    const [selectedCamera, setSelectedCamera] = useState('default_cam');\n    const [selectedLocation, setSelectedLocation] = useState('default_l');\n    const [isCamSelected, setIsCamSelected] = useState(false);\n    const [showEmailPopup, setShowEmailPopup] = useState(false);\n    const [showSMSPopup, setShowSMSPopup] = useState(false);\n    const [subject, setSubject] = useState('');\n    const [body, setBody] = useState('');\n    const [recipient, setRecipient] = useState('');\n    const [message, setMeseage] = useState('');\n    const [contact, setContact] = useState('');\n\n    const cameraPaths = {\n        default_cam: '',\n        cam1_input_s: '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/Routes/Accident_Severity_Detection/static/files/s_934.mp4',\n        cam2_input_s: '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/Routes/Accident_Severity_Detection/static/files/s_1315.mp4',\n        cam3_input_s: '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/Routes/Accident_Severity_Detection/static/files/s_1317.mp4',\n        cam4_input_s: '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/Routes/Accident_Severity_Detection/static/files/s_1329.mp4',\n        cam5_input_m: '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/Routes/Accident_Severity_Detection/static/files/m_72.mp4',\n        cam6_input_m: '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/Routes/Accident_Severity_Detection/static/files/m_109.mp4',\n        cam7_input_m: '/Users/pasindushv/Desktop/RP-GITLAB/2023-228/TrafficOptima/Monitoring_System/Server_Application/Flask_Server/Routes/Accident_Severity_Detection/static/files/m_117.mp4',\n    };\n\n    const locationOptions = {\n        default_l: '',\n        location1: 'Nugegoda',\n        location2: 'Rajagiriya',\n        location3: 'Borella',\n        location4: 'Kaduwela',\n        location5: 'Kottawa',\n        location6: 'Homagama',\n        location7: 'Maharagama',\n        location8: 'Kirulapone',\n\n    };\n\n    const handleCameraChange = (event) => {\n        setSelectedCamera(event.target.value);\n    };\n\n    const handleLocationChange = (event) => {\n        setSelectedLocation(event.target.value);\n    };\n\n    const validate = () => {\n        let result = true;\n        if (selectedCamera === 'default_cam' || selectedLocation === 'default_l') {\n            result = false;\n            swal(\"Failed!\", \"Please select the camera and the location ❗\uFE0F❗\uFE0F \", \"error\");\n        }\n        return result;\n    }\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (validate()) {\n            // Get the selected camera's path and location\n            const selectedCameraPath = cameraPaths[selectedCamera];\n            const selectedLocationValue = locationOptions[selectedLocation];\n\n            // Send selectedCameraPath and selectedLocationValue to the backend using a POST request.\n            fetch('/accident/select_camera', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ cameraPath: selectedCameraPath, location: selectedLocationValue }),\n            })\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data.message); // Handle the response from the backend\n                    setIsCamSelected(true);\n                })\n                .catch(error => {\n                    console.error('Error:', error);\n                });\n        }\n    };\n\n    const handleReset = () => {\n        setSelectedCamera('default_cam'); // Reset selected camera to default\n        setSelectedLocation('default_l'); // Reset selected camera to default\n        setIsCamSelected(false); // Hide the output video\n        window.location.reload(false); // Refresh the page\n    };\n\n    // Function to handle the closing of modal\n    const handleClose = () => {\n        setBody('');\n        setContact('');\n        setMeseage('');\n        setRecipient('');\n        setSubject('');\n        setShowEmailPopup(false);\n        setShowSMSPopup(false);\n    }\n\n    const handleShowEmailPopup = () => setShowEmailPopup(true);\n    const handleShowSMSPopup = () => setShowSMSPopup(true);\n\n    // Email form valications\n\n    const emailFormValidate = () => {\n        const emailRegex = /^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/;\n        let result = true;\n\n        if (subject === '' || body === '' || recipient === '') {\n            result = false;\n            swal(\"Email Sending Failed!\", \"You must fill all the fields ❗\uFE0F❗\uFE0F \", \"error\");\n        } else if (!recipient.match(emailRegex)) {\n            result = false;\n            swal(\"Email Sending Failed!\", \"Incorrect email address ❗\uFE0F❗\uFE0F \", \"error\");\n        }\n        return result;\n    }\n\n    // SMS form valications\n\n    const smsFormValidate = () => {\n        const mobileRegex = /^\\d{10}$/;\n        let result = true;\n\n        if (contact === '' || message === '') {\n            result = false;\n            swal(\"SMS Sending Failed!\", \"You must fill all the fields ❗\uFE0F❗\uFE0F \", \"error\");\n        } else if (!contact.match(mobileRegex)) {\n            result = false;\n            swal(\"SMS Sending Failed!\", \"Incorrect email address ❗\uFE0F❗\uFE0F \", \"error\");\n        }\n        return result;\n    }\n\n    const handleSubmitEmail = async (e) => {\n        e.preventDefault();\n        if (emailFormValidate()) {\n            const data = {\n                subject,\n                body,\n                to: recipient,\n            };\n\n            try {\n                const response = await fetch('/accident/send_email', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(data),\n                });\n\n                if (response.ok) {\n                    swal(\"Successful!\", \"Email Successfully Sent ✅ \", \"success\");\n                    handleClose();\n                } else {\n                    alert('Failed to send email.');\n                }\n            } catch (error) {\n                alert('An error occurred while sending the email.');\n            }\n        }\n    };\n\n    const handleSubmitSMS = async (e) => {\n        e.preventDefault();\n        if (smsFormValidate()) {\n            const data = {\n                message,\n                to: contact,\n            };\n\n            try {\n                const response = await fetch('/accident/send_sms', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(data),\n                });\n\n                if (response.ok) {\n                    swal(\"Successful!\", \"SMS Successfully Sent ✅ \", \"success\");\n                    handleClose();\n                } else {\n                    alert('Failed to send SMS.');\n                }\n            } catch (error) {\n                console.error('Error sending SMS:', error);\n                alert('An error occurred while sending the SMS.');\n            }\n        }\n    };\n\n    return (\n        <div>\n            <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n            <div style={{\n                display: \"flex\",\n                margin: \"1%\",\n                flexDirection: \"column\",\n                width: window.innerWidth - 270,\n            }}>\n                <div className=\"cm_container\">\n                    <div className=\"cm_form-column\">\n                        <form onSubmit={handleSubmit}>\n                            <label>Location:</label>\n                            <select value={selectedLocation} onChange={handleLocationChange}>\n                                <option value=\"default_l\">Select Location</option>\n                                <option value=\"location1\">Nugegoda</option>\n                                <option value=\"location2\">Rajagiriya</option>\n                                <option value=\"location3\">Borella</option>\n                                <option value=\"location4\">Kaduwela</option>\n                                <option value=\"location5\">Kottawa</option>\n                                <option value=\"location6\">Homagama</option>\n                                <option value=\"location7\">Maharagama</option>\n                                <option value=\"location8\">Kirulapone</option>\n                            </select>\n                            <br />\n                            <label>Camera:</label>\n                            <select value={selectedCamera} onChange={handleCameraChange}>\n                                <option value=\"default_cam\">Select Camera</option>\n                                <option value=\"cam1_input_s\">Camera 1 - S</option>\n                                <option value=\"cam2_input_s\">Camera 2 - S</option>\n                                <option value=\"cam3_input_s\">Camera 3 - S</option>\n                                <option value=\"cam4_input_s\">Camera 4 - S</option>\n                                <option value=\"cam5_input_m\">Camera 5 - M</option>\n                                <option value=\"cam6_input_m\">Camera 6 - M</option>\n                                <option value=\"cam7_input_m\">Camera 7 - M</option>\n                            </select>\n                            <br />\n                            <div>\n                                <button type=\"button\" onClick={handleSubmit}>\n                                    <span style={{ marginRight: '4px' }}>Submit</span>\n                                    <span className=\"material-icons\">check_circle</span>\n                                </button>\n                                <button type=\"button\" onClick={handleReset}>\n                                    <span style={{ marginRight: '4px' }}>Reset</span>\n                                    <span className=\"material-icons\">refresh</span>\n                                </button>\n                            </div>\n\n                            <div className =\"smsemailBtn\">\n                                <button type=\"button\" onClick={handleShowSMSPopup}>\n                                    <span style={{ marginRight: '4px' }}>Send SMS</span>\n                                    <span className=\"material-icons\">message</span>\n                                </button>\n                                <button type=\"button\" onClick={handleShowEmailPopup}>\n                                    <span style={{ marginRight: '4px' }}>Send Email</span>\n                                    <span className=\"material-icons\">email</span>\n                                </button>\n                            </div>\n                        </form>\n\n                    </div>\n                    <div className=\"cm_output-column\">\n                        {isCamSelected && <OutputVideoComponent />}\n                    </div>\n                </div>\n            </div>\n\n            {/* Modal Popup - EMAIL */}\n            <Modal style={{marginTop:'7%'}} show={showEmailPopup} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Send Email</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Row>\n                        <Col>\n                            <text>Subject</text>\n                            <br></br>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Subject\" value={subject} onChange={(e) => setSubject(e.target.value)} />\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row>\n                        <Col>\n                            <text>Body</text>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Body\" value={body} onChange={(e) => setBody(e.target.value)} />\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row>\n                        <Col>\n                            <text>Email</text>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Recipient\" value={recipient} onChange={(e) => setRecipient(e.target.value)} />\n                        </Col>\n                    </Row>\n                    <br></br>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleSubmitEmail}>\n                        Send Email\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            <div>\n                {/* Modal Popup - SMS */}\n                <Modal style={{marginTop:'14%'}} show={showSMSPopup} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Send SMS</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Row>\n                            <Col>\n                                <text>Message</text>\n                                <br></br>\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Message\" value={message} onChange={(e) => setMeseage(e.target.value)} />\n                            </Col>\n                        </Row>\n                        <br></br>\n                        <Row>\n                            <Col>\n                                <text>Recipient</text>\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Recipient\" value={contact} onChange={(e) => setContact(e.target.value)} />\n                            </Col>\n                        </Row>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"secondary\" onClick={handleSubmitSMS}>\n                            Send SMS\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                </div>\n        </div>\n    );\n}\n\nexport default ASDCamMonitoring;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Frontend_Application/src/components/Accident_Severity_Detection/CameraMonitoring/ASDCamMonitoring.js b/Frontend_Application/src/components/Accident_Severity_Detection/CameraMonitoring/ASDCamMonitoring.js
--- a/Frontend_Application/src/components/Accident_Severity_Detection/CameraMonitoring/ASDCamMonitoring.js	(revision b20a5f872c074101a830ff490895a993d68dc98b)
+++ b/Frontend_Application/src/components/Accident_Severity_Detection/CameraMonitoring/ASDCamMonitoring.js	(date 1698439078963)
@@ -246,7 +246,7 @@
                                 </button>
                             </div>
 
-                            <div className ="smsemailBtn">
+                            <div className ="smsemailBtn"  >
                                 <button type="button" onClick={handleShowSMSPopup}>
                                     <span style={{ marginRight: '4px' }}>Send SMS</span>
                                     <span className="material-icons">message</span>
